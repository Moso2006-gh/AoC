const input = `.##.#.#####..##.#.#...#.##....#.######.##.#.#.##..#.#.##.#.######.#.###.##
.#.#..#####....###.####.###..##.....#####..#.#####.##...#.##.#.##....####.
........##..#.###.#.#..#..#.######..#.##.#.#####.#..##...#.#.##...###.#...
.#..#....#.......#..#...##.#.##.#..##..#.###.######.#.#.#####....#...####.
##......##.####...##.###....##.#.####..###...#..#.#...#..#.##..###.#.####.
#...#..##.######.#...##...#.#........##...#.###..#.##..##.##...#######.##.
#....#.#..###...####.....#..##.##......#.....###.##.....#.####..##..#..#..
...##.#.##.#.#...##....#.#.###.###.##..#.##.###...#..#..##..#....#.##.##.#
#....#########.####..#....##.###.##.....###.#..##...##.#####.###..##.....#
###.######.###.#####..####.#....#.###..#..###.#.####.###..#.##...##.#..#..
.##....#..##..#....######.##..###.#.#.#...###...#.###.##.#....#.##.#.####.
.......##...##..#..####.##........##...##.#.###.#####.####.##...####.#....
###.#......#..#.#.#.####...#####.#.####.#.####....#.....#.######....##.##.
###...#.##.####..#..##.#.#.#...#.###..##..##.###....##.....##..#.##..#.#..
#########.#.####..##.#.#...##.##....####..#####..#....#.#...######.###....
#.##....###..####.#..#####.#..##.###....#.#.###..##.#....###.#.#.#.#..##..
##.###....###..##..###..#.#..##.#.##.#..#.......#.##.######.#...#...#.####
##.......#.....####...#...#.##.#..##.##........####..#.....#...##.#...#.##
.##..#.#....##.....##.##.#.#.###...##...#..####...#.#.#..######.#...##....
.#....##.#.#.#..#.#.#....#....###.##.###....#.....###.#...#.##..#..####..#
..##...##..###..#####.########.##....#.#...##.##..#.#.##...##..#...##.##.#
#.#...##....#...###....#...#.##.#.##.######.##...#####...##.##...#######..
.#.#.######.##..#.####.#.##.##.##.#...####......##.....##...####..##.####.
.###.###..##.....#####...####..##...##.##.##..##...#..#.#..##.....###.#.##
#.#.####.##.#.###.###.#..#.#....#######.###......#.##.....######.....##...
##..#.#.#..#....##.....#.###.#..##.....##############.#.#.####.##..#.##.##
#.....#.#..#.##..##..##..##...###....###..##.##...##.##....#..#######..##.
##.##..###.#..###.##.####.#.#.........##.#......#.###.#..##..#...##..#.##.
..#.###.##.####.####.#..#.###...#.#.###.#.##..#....#.#.#...#....###....###
#..#...##.#....###.#.###..#...###.##.#.######......#.##.#..#..#.###.######
#.#...#.##..#....###....#.#.#.....########.#..##...#.#..############.#####
..####.#....#####.#.#.#....#..#.##....#..#..###.####.#....##.##...#.#.##.#
.##...#.#..#.###..#...#..#.#.#....#..#.###.##.#.####.#.###..#..#.....##..#
###..#.##...#.###.###...##..#.####....#.####......#..###...#...#.#....#.##
...#.######...#.########..######...##.....###.####.#.###...#.###.###.#....
##.#####...###.##.#.####..#...#.#####.##.....#....####.#####.####.###..#.#
....###...#.#..#.##.#...#....#.#.#..##########.....#..##..##..##.##.##.#..
#....#..##.#...###..####.#......########.#.......###..#...##.#.#..#.....#.
....#.......###.##.##.###.#.####.#...##.#.#..#.#.#.#.....##.#.#...#.#.#.##
###.#.##..##..####.#####.#.##.###..#.#######.##...#.#####.##.##.###..#...#
####.#.#..#..##.##..#.#.##.#.###.#...#.#..##.######.#.###.#..#..####..#..#
#......#.###.#.##...##..##...#.#..#.#.###...#..##..##.###.#.#..#.####.#..#
.###.#.#.....#.#####.....#.#..#...#...####...#.####....#..#.#...#.#.#..###
##....######.#.....##.....#.###...#..###.#.##...##..#.###.....#..#..#.#...
##..#.#.##....#.#...##.##.##.##.#.#.##..#.#..#..##.##..##..#.##..#....##.#
#.##.#.#.###...######...##.#.#.##.#.#..#...#.###..##.##.#....#..#..#.#...#
..##...#....#.##.##..##...##.......#..#####...#.#...###..#.#.##...#..#....
#.#.....##.##.#.#.#...##.#....#...#.#.##..#.####.#.#.##..#.##.##.###....##
..#.##..#.#..##.#..##....###.##...#.##...#.#....##.###.#.#.##...##.##..#.#
.######.###........#.#.....#.#.......#.##.########.#...#.#..##.##.##..####
#..##.....##....###.###.#.#..##..##..#.#.#.##.#.....##.###.#.##.##.#.#...#
.......###..##.##.####.#.#####.#..#...#####...#...#..#.##.####..##.##..##.
##....#####.##....#..###.####.###.###..#.#.#..#.#.##..#..###.#########.#..
#.###..###...#.#..#.#...#.#.##.#.######.####..#..##..##.#......###.#..#...
.##..#####..#.#....###.###.##.....##..#.##....#..##.#...####...##.#.......
##.####..##...##.#...######.###.###.#.###..####.####.##..###.##.##..######
##.#.####.#.#..#.#.###.......###......####.#.#.##.#...##..##..##.....#.#.#
.###....####.#...#.#......#####.##.##.#...###..##...##...#####....##.#..##
#..###..##....#...##.###..##.##.##########..#..##...#....##....#.......##.
###.###..#.#..#....##.#......#.###.#.#.#.#.##...#..#..##......###.##..#.#.
....##......#......#....#.##.####.####.##.###.#.##.#..#.#.#..........#.#.#
#...####...#.###..##....##..##.#####.###.#...#..#.....##.#.###.##.#...#.##
.###..##.#.###.#....#..#.###.######.##.#####..#..#.#..##.#..######.##....#
.#....###..#.#.###....##.#...###.#.#...##.#.##.##.#.#.##.#.#...#.#........
..#.##...#....##.#..#.#.#.......#..#......#..#..#..#.#.##....#.#.#...###..
##.#.#..##.##.#....#.#...........###....#..##.##.######.##.##..####.#.....
..##...###....###.#####..###......###.#..##...##....##.#.#.###....#..##..#
.#....#.#.#.###..##.##.#....#.##.##....#.#.##..###..##...###.#...#....##..
#...#...####...####...#.#.#.#####....####..#..##.###.#.#....##...#.##..##.
###..#####..#.#.#...#.#.#...#...###.####.###..#...###.####.####..##.#..#..
#...#####...##..#.###.#.#.#.#..####..##......#####....#####.####.####...##
..........#..#..#..##.#.##...##...#..#.#...#####.....#####..#...##.##.#..#
.#.##.###...#.##.#....###.#.##.##.#.####.#..##.#..#..#.#.##........#.#####
.###########.##.###.#..#.###....#......#.##.....####.####..##.....#####.#.`

let elfs = {};
let elfsArr = [];
let margins = [[100, 0], [100, 0]]

input.split('\n').forEach((line, m) => {
    line.split('').forEach((chr, n) => {
        if(chr === "#") {
            elfs[m] === undefined ? elfs[m] = [n] : elfs[m].push(n)
            elfsArr.push([m, n])
        }
    })
})

function elfsNear(pos) {
    for (let y = -1; y <= 1; y++) {
        for (let x = -1; x <= 1; x++) {
            if(x === 0 && y === 0) continue;

            try{ 
                if(elfs[pos[0] + y].indexOf(pos[1] + x) !== -1) return true; 
            } catch{};
        }   
    }

    return false;
}

function proposeChange(pos, directions) {
    for (let i = 0; i < directions.length; i++) {
        const dir = directions[i];
        let canMove = true;
        switch(dir) {
            case 'N':
                for (let x = -1; x <= 1; x++) { 
                    try{
                        if(elfs[pos[0] - 1].indexOf(pos[1] + x) !== -1) canMove = false;
                    } catch{};
                }

                if(canMove) return([pos[0] - 1, pos[1]])
            break;
            
            case 'S':
                for (let x = -1; x <= 1; x++) {
                    try {
                        if(elfs[pos[0] + 1].indexOf(pos[1] + x) !== -1) canMove = false;
                    } catch {};
                }

                if(canMove) return([pos[0] + 1, pos[1]])
            break;

            case 'W':
                for (let y = -1; y <= 1; y++) {
                    try {
                        if(elfs[pos[0] + y].indexOf(pos[1] - 1) !== -1) canMove = false;
                    } catch{};
                }

                if(canMove) return([pos[0], pos[1] - 1])
            break;
            
            case 'E':
                for (let y = -1; y <= 1; y++) {
                    try {
                        if(elfs[pos[0] + y].indexOf(pos[1] + 1) !== -1) canMove = false;
                    } catch {};
                }

                if(canMove) return([pos[0], pos[1] + 1])
            break;

            default:
                console.error('Cant recognize de direction')
            break;
        }   
    }

    return undefined;
}

let directions = ['N', 'S', 'W', 'E'];
for (let i = 0; i < 10; i++) {
    let proposedChanges = [];
    // console.log(elfs);
    elfsArr.forEach((elf, i) => {
        if(!elfsNear(elf)) return;

        const proposition = proposeChange(elf, directions);
        if(proposition !== undefined) {
            const existingChange = proposedChanges.find(change => change[1].toString() === proposition.toString())
            
            if(existingChange !== undefined) { 
                proposedChanges.splice(proposedChanges.indexOf(existingChange), 1)
            }
            else proposedChanges.push([i, proposition])
        }
    })

    proposedChanges.forEach(change => {
        const currentPos = elfsArr[change[0]] ;
        elfsArr[change[0]] = [...change[1]];

        elfs[currentPos[0]].splice(elfs[currentPos[0]].indexOf(currentPos[1]), 1);
        if(elfs[currentPos[0]].length === 0) delete elfs[currentPos[0]];
        elfs[change[1][0]] === undefined ? elfs[change[1][0]] = [change[1][1]] : elfs[change[1][0]].push(change[1][1])

    })

    directions.push(directions.shift())
}

elfsArr.forEach(elf => {
    if(elf[0] < margins[0][0]) margins[0][0] = elf[0];
    if(elf[0] > margins[0][1]) margins[0][1] = elf[0];
    if(elf[1] < margins[1][0]) margins[1][0] = elf[1];
    if(elf[1] > margins[1][1]) margins[1][1] = elf[1];
})

console.log(elfs);
console.log(margins);
console.log((margins[0][1] - margins[0][0] + 1) * (margins[1][1] - margins[1][0] + 1) - elfsArr.length);