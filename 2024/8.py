from collections import defaultdict

raw_data = """..................................3.........H.....
..............F............................CK.....
..................F...e...m..........C.Ki.........
......1..................m........................
.........F.1......................................
.......1.....W...........3..Z............i........
...........W...m....1.............................
......W...........m..............N..C.............
E............2................Z.K.......p.........
.....Y.........4....i.........N...................
..............W.Y....................3..9....i....
.................................h........9.......
.........................................Z.......H
2...............................3.......H9........
..2..........4T...................................
...2..............Y...4........Z..................
.........E.........................N...5..........
.......................................e..........
..............................C...................
..E..................P.....................p.H....
......4............................IN......h.p....
..........................T....M.........K..p.....
..........................G.......................
..................................................
...................................M..............
.5.............G..............M...................
.............Y..........................M.........
.................E8...0.........................h.
.............................P............g.......
......5...........................................
.............n.................................c..
...............................g....f.......c.....
.y..............8...t....T........................
..7..F.............T........R..........f........u.
.kz.......7..R....................................
.........8..................U.........P...........
......U.............wG....v.....P.............c...
...0.....R..........g.............................
.....7.....8.........g.............f..............
....z...........G................7................
........5........6.v.....U..f.......u........e....
.........V....v........6......t...................
......6..0..y.....R........V...........r..........
...........v.......we..U.............c..r.........
................................r.......Iu........
k............y6..........t.................r...I..
........k............t...........w................
.............z....n.................I.............
..0.................n.............................
...............n..........V...........y........u.."""

from collections import defaultdict

# Parse raw data into a grid of characters
data = [list(line) for line in raw_data.split("\n")]

# Antennae positions mapped to their elements
antenae_poss = defaultdict(list)

# Set to track unique positions visited by antinodes
antinode_poss = set()

# Iterate over the grid and process each element
for i, row in enumerate(data):
    for j, elem in enumerate(row):
        if elem in {".", "#"}:  # Skip empty or marked positions
            continue

        # Add the current position to antinode positions
        antinode_poss.add((i, j))

        # Check existing positions for the current element
        for pos in antenae_poss[elem]:
            distance = (i - pos[0], j - pos[1])

            # Forward pass
            forward_pass = (pos[0] - distance[0], pos[1] - distance[1])
            while 0 <= forward_pass[0] < len(data) and 0 <= forward_pass[1] < len(data[0]):
                if forward_pass not in antinode_poss:
                    if data[forward_pass[0]][forward_pass[1]] == ".":
                        data[forward_pass[0]][forward_pass[1]] = "#"
                    antinode_poss.add(forward_pass)
                forward_pass = (forward_pass[0] - distance[0], forward_pass[1] - distance[1])

            # Backward pass
            backward_pass = (i + distance[0], j + distance[1])
            while 0 <= backward_pass[0] < len(data) and 0 <= backward_pass[1] < len(data[0]):
                if backward_pass not in antinode_poss:
                    if data[backward_pass[0]][backward_pass[1]] == ".":
                        data[backward_pass[0]][backward_pass[1]] = "#"
                    antinode_poss.add(backward_pass)
                backward_pass = (backward_pass[0] + distance[0], backward_pass[1] + distance[1])

        # Add the current position to the antennae list for the element
        antenae_poss[elem].append((i, j))

# Output the total count of unique antinode positions
print(len(antinode_poss))